// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.3.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CourtCaseManagement.Test.Process
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Processos")]
    public partial class ProcessosFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "AddAsync.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-br"), "Processos", "\tPara quanto precisar cadastrar um novo processo\r\n\tEnquanto funcionario\r\n\tEu gost" +
                    "aria de cadastrar um novo processo", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cadastra novo processo")]
        [NUnit.Framework.CategoryAttribute("AddAsync")]
        [NUnit.Framework.TestCaseAttribute("\"3513038-00.2016.8.23.0023\"", "\"2020-10-07\"", "\"S\"", "\"C\"", "\"teste 1\"", "\"Em andamento\"", "\"237.958.172-00\"", "\"Nicolas Thales Carlos Moraes\"", "\"nicolas@gmail.com\"", "\"teste\"", null)]
        [NUnit.Framework.TestCaseAttribute("\"3513038-00.2016.8.23.0024\"", "\"\"", "\"N\"", "\"\"", "\"\"", "\"Desmembrado\"", "\"558.526.150-99\"", "\"Murilo Miguel Benício Ribeiro\"", "\"murilo@gmail.com\"", "\"teste\"", null)]
        public virtual void CadastraNovoProcesso(string unifiedProcessNumber, string distributionDate, string justiceSecret, string clientPhysicalFolder, string description, string situationId, string responsiblesCpf, string responsiblesName, string responsiblesEMail, string image, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AddAsync"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("unifiedProcessNumber", unifiedProcessNumber);
            argumentsOfScenario.Add("distributionDate", distributionDate);
            argumentsOfScenario.Add("justiceSecret", justiceSecret);
            argumentsOfScenario.Add("clientPhysicalFolder", clientPhysicalFolder);
            argumentsOfScenario.Add("description", description);
            argumentsOfScenario.Add("situationId", situationId);
            argumentsOfScenario.Add("responsiblesCpf", responsiblesCpf);
            argumentsOfScenario.Add("responsiblesName", responsiblesName);
            argumentsOfScenario.Add("responsiblesEMail", responsiblesEMail);
            argumentsOfScenario.Add("image", image);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cadastra novo processo", null, tagsOfScenario, argumentsOfScenario);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
 testRunner.Given(string.Format("um funcionario cadastrando um novo processo {0}", unifiedProcessNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 11
 testRunner.And(string.Format("com a data de distribuição {0}", distributionDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 12
 testRunner.And(string.Format("com o processo segredo de justiça {0}", justiceSecret), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 13
 testRunner.And(string.Format("com a pasta física cliente {0}", clientPhysicalFolder), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 14
 testRunner.And(string.Format("com a descrição {0}", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 15
 testRunner.And(string.Format("com a situação {0}", situationId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 16
 testRunner.And(string.Format("com o cpf do responsável {0}", responsiblesCpf), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 17
 testRunner.And(string.Format("com o nome do responsável {0}", responsiblesName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 18
 testRunner.And(string.Format("com o e-mail do responsável {0}", responsiblesEMail), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 19
 testRunner.And(string.Format("com a foto do responsável {0}", image), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 20
 testRunner.When("solicitar o cancelamento do boleto", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 21
 testRunner.Then("o sistema retornara o boleto na situação cancelado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
