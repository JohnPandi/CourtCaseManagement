// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.3.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CourtCaseManagement.Test.Responsible
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Listar responsáveis")]
    public partial class ListarResponsaveisFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "ListAsync.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-br"), "Listar responsáveis", "\tPara quanto precisar consultar responsáveis\r\n\tEnquanto funcionario\r\n\tEu gostaria" +
                    " de consultar responsáveis", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Listar responsáveis")]
        [NUnit.Framework.CategoryAttribute("ResponsibleListAsync")]
        [NUnit.Framework.TestCaseAttribute("\"3513038-00.2016.8.23.0001\"", "\"\"", "\"\"", "1", null)]
        [NUnit.Framework.TestCaseAttribute("\"\"", "\"237.958.172-00\"", "\"\"", "1", null)]
        [NUnit.Framework.TestCaseAttribute("\"\"", "\"\"", "\"Nicolas Thales Carlos Moraes\"", "1", null)]
        [NUnit.Framework.TestCaseAttribute("\"\"", "\"\"", "\"Ca\"", "6", null)]
        public virtual void ListarResponsaveis(string unifiedProcessNumber, string cpf, string name, string qtdeResponsaveisRetornados, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ResponsibleListAsync"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("unifiedProcessNumber", unifiedProcessNumber);
            argumentsOfScenario.Add("cpf", cpf);
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("qtdeResponsaveisRetornados", qtdeResponsaveisRetornados);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Listar responsáveis", null, tagsOfScenario, argumentsOfScenario);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "unifiedProcessNumber",
                            "distributionDate",
                            "justiceSecret",
                            "clientPhysicalFolder",
                            "description",
                            "situationId",
                            "responsiblesCpf",
                            "responsiblesName",
                            "responsiblesEMail",
                            "image"});
                table4.AddRow(new string[] {
                            "\"3513038-00.2016.8.23.0001\"",
                            "\"2020-10-01\"",
                            "\"S\"",
                            "\"C\"",
                            "\"teste 01\"",
                            "\"Em andamento\"",
                            "\"237.958.172-00\"",
                            "\"Nicolas Thales Carlos Moraes\"",
                            "\"nicolas@gmail.com\"",
                            "\"teste 01\""});
                table4.AddRow(new string[] {
                            "\"3513038-00.2016.8.23.0002\"",
                            "\"2020-10-02\"",
                            "\"N\"",
                            "\"C\"",
                            "\"teste 02\"",
                            "\"Em andamento\"",
                            "\"329.080.215-95\"",
                            "\"Silvana Yasmin Adriana Aparício\"",
                            "\"nicolas@gmail.com\"",
                            "\"teste 02\""});
                table4.AddRow(new string[] {
                            "\"3513038-00.2016.8.23.0003\"",
                            "\"2020-10-03\"",
                            "\"S\"",
                            "\"C\"",
                            "\"teste 03\"",
                            "\"Desmembrado\"",
                            "\"460.314.561-68\"",
                            "\"Martin Augusto da Cunha\"",
                            "\"nicolas@gmail.com\"",
                            "\"teste 03\""});
                table4.AddRow(new string[] {
                            "\"3513038-00.2016.8.23.0004\"",
                            "\"2020-10-04\"",
                            "\"N\"",
                            "\"C\"",
                            "\"teste 04\"",
                            "\"Desmembrado\"",
                            "\"006.147.259-09\"",
                            "\"Raimunda Lívia Louise Sales\"",
                            "\"nicolas@gmail.com\"",
                            "\"teste 04\""});
                table4.AddRow(new string[] {
                            "\"3513038-00.2016.8.23.0005\"",
                            "\"2020-10-05\"",
                            "\"S\"",
                            "\"C\"",
                            "\"teste 05\"",
                            "\"Em recurso\"",
                            "\"720.951.228-44\"",
                            "\"Pedro Bruno Peixoto\"",
                            "\"nicolas@gmail.com\"",
                            "\"teste 05\""});
                table4.AddRow(new string[] {
                            "\"3513038-00.2016.8.23.0006\"",
                            "\"2020-10-06\"",
                            "\"N\"",
                            "\"C\"",
                            "\"teste 06\"",
                            "\"Em recurso\"",
                            "\"828.780.131-15\"",
                            "\"Calebe Augusto Porto\"",
                            "\"nicolas@gmail.com\"",
                            "\"teste 06\""});
                table4.AddRow(new string[] {
                            "\"3513038-00.2016.8.23.0007\"",
                            "\"2020-10-07\"",
                            "\"S\"",
                            "\"C\"",
                            "\"teste 07\"",
                            "\"Finalizado\"",
                            "\"092.552.016-03\"",
                            "\"Carla Caroline Clara da Rosa\"",
                            "\"nicolas@gmail.com\"",
                            "\"teste 07\""});
                table4.AddRow(new string[] {
                            "\"3513038-00.2016.8.23.0008\"",
                            "\"2020-10-08\"",
                            "\"N\"",
                            "\"C\"",
                            "\"teste 08\"",
                            "\"Finalizado\"",
                            "\"292.604.865-30\"",
                            "\"Cecília Liz Ayla Nogueira\"",
                            "\"nicolas@gmail.com\"",
                            "\"teste 08\""});
                table4.AddRow(new string[] {
                            "\"3513038-00.2016.8.23.0009\"",
                            "\"2020-10-09\"",
                            "\"S\"",
                            "\"C\"",
                            "\"teste 09\"",
                            "\"Arquivado\"",
                            "\"503.361.196-82\"",
                            "\"Ricardo Augusto Rodrigues\"",
                            "\"nicolas@gmail.com\"",
                            "\"teste 09\""});
                table4.AddRow(new string[] {
                            "\"3513038-00.2016.8.23.0010\"",
                            "\"2020-10-10\"",
                            "\"N\"",
                            "\"C\"",
                            "\"teste 10\"",
                            "\"Arquivado\"",
                            "\"113.071.090-47\"",
                            "\"Fátima Carolina Castro\"",
                            "\"nicolas@gmail.com\"",
                            "\"teste 10\""});
                table4.AddRow(new string[] {
                            "\"3513038-00.2016.8.23.0011\"",
                            "\"2020-10-11\"",
                            "\"S\"",
                            "\"C\"",
                            "\"teste 11\"",
                            "\"Em andamento\"",
                            "\"634.434.612-47\"",
                            "\"Otávio Sérgio Dias\"",
                            "\"nicolas@gmail.com\"",
                            "\"teste 11\""});
                table4.AddRow(new string[] {
                            "\"3513038-00.2016.8.23.0012\"",
                            "\"2020-10-12\"",
                            "\"N\"",
                            "\"C\"",
                            "\"teste 12\"",
                            "\"Em andamento\"",
                            "\"739.403.782-75\"",
                            "\"Juan Luiz Carvalho\"",
                            "\"nicolas@gmail.com\"",
                            "\"teste 12\""});
#line 10
 testRunner.Given("o processo previamente cadastrado", ((string)(null)), table4, "Dado ");
#line hidden
#line 24
 testRunner.And(string.Format("ao filtrar pelo número do processo unificado {0}", unifiedProcessNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 25
 testRunner.And(string.Format("ao filtrar pelo cpf {0}", cpf), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 26
 testRunner.And(string.Format("ao filtrar pela nome {0}", name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 27
 testRunner.When("solicitar a consulta dos responsáveis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 28
 testRunner.Then("o sistema retornara o código 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
#line 29
 testRunner.And(string.Format("o sistema retornara {0} de responsáveis", qtdeResponsaveisRetornados), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
