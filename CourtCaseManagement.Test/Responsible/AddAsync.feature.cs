// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.3.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CourtCaseManagement.Test.Responsible
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Responsáveis")]
    public partial class ResponsaveisFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "AddAsync.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-br"), "Responsáveis", "\tPara quanto precisar cadastrar um responsável\r\n\tEnquanto funcionario\r\n\tEu gostar" +
                    "ia de cadastrar um responsável", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cadastrar novo responsável")]
        [NUnit.Framework.CategoryAttribute("ResponsibleAddAsync")]
        [NUnit.Framework.TestCaseAttribute("\"237.958.172-00\"", "\"Nicolas Thales Carlos Moraes\"", "\"nicolas@gmail.com\"", "\"teste\"", null)]
        [NUnit.Framework.TestCaseAttribute("\"558.526.150-99\"", "\"Murilo Miguel Benício Ribeiro\"", "\"murilo@gmail.com\"", "\"teste\"", null)]
        public virtual void CadastrarNovoResponsavel(string responsiblesCpf, string responsiblesName, string responsiblesEMail, string image, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ResponsibleAddAsync"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("responsiblesCpf", responsiblesCpf);
            argumentsOfScenario.Add("responsiblesName", responsiblesName);
            argumentsOfScenario.Add("responsiblesEMail", responsiblesEMail);
            argumentsOfScenario.Add("image", image);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cadastrar novo responsável", null, tagsOfScenario, argumentsOfScenario);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
 testRunner.Given(string.Format("o cadastro de um novo responsável com o cpf {0}", responsiblesCpf), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 11
 testRunner.And(string.Format("com o nome {0}", responsiblesName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 12
 testRunner.And(string.Format("com o e-mail {0}", responsiblesEMail), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 13
 testRunner.And(string.Format("com a foto {0}", image), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 14
 testRunner.When("solicitar o cadastro do responsável", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 15
 testRunner.Then("o sistema retornara o código 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cadastrar novo responsável sem informar todos os campos obrigatórios")]
        [NUnit.Framework.CategoryAttribute("ResponsibleAddAsync")]
        [NUnit.Framework.TestCaseAttribute("\"\"", "\"Nicolas Thales Carlos Moraes\"", "\"nicolas@gmail.com\"", "\"teste\"", "\"RequiredCpf\"", null)]
        [NUnit.Framework.TestCaseAttribute("\"\"", "\"\"", "\"nicolas@gmail.com\"", "\"teste\"", "\"RequiredCpf;RequiredName\"", null)]
        [NUnit.Framework.TestCaseAttribute("\"\"", "\"\"", "\"\"", "\"teste\"", "\"RequiredCpf;RequiredName;RequiredMail\"", null)]
        [NUnit.Framework.TestCaseAttribute("\"\"", "\"\"", "\"\"", "\"\"", "\"RequiredCpf;RequiredName;RequiredMail;RequiredPhotograph\"", null)]
        public virtual void CadastrarNovoResponsavelSemInformarTodosOsCamposObrigatorios(string responsiblesCpf, string responsiblesName, string responsiblesEMail, string image, string messages, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ResponsibleAddAsync"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("responsiblesCpf", responsiblesCpf);
            argumentsOfScenario.Add("responsiblesName", responsiblesName);
            argumentsOfScenario.Add("responsiblesEMail", responsiblesEMail);
            argumentsOfScenario.Add("image", image);
            argumentsOfScenario.Add("messages", messages);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cadastrar novo responsável sem informar todos os campos obrigatórios", null, tagsOfScenario, argumentsOfScenario);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 24
 testRunner.Given(string.Format("o cadastro de um novo responsável com o cpf {0}", responsiblesCpf), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 25
 testRunner.And(string.Format("com o nome {0}", responsiblesName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 26
 testRunner.And(string.Format("com o e-mail {0}", responsiblesEMail), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 27
 testRunner.And(string.Format("com a foto {0}", image), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 28
 testRunner.When("solicitar o cadastro do responsável", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 29
 testRunner.Then("o sistema retornara o código 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
#line 30
 testRunner.And(string.Format("apresentara os seguintes codigo de erros {0}", messages), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
